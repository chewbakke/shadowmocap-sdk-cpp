name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      # Customize the CMake build type (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: Debug

    steps:
    - uses: actions/checkout@v3
    
    - uses: actions/cache@v3
      #
      # Enable package binary caching
      # 
      # https://github.com/actions/cache
      # https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
      #
      # Windows: $APPDATA/vcpkg/archives
      # Linux/macOS: $HOME/.cache/vcpkg/archives
      #
      with:
        path: ~/.cache/vcpkg/archives
        key: ${{ runner.os }}-moose-${{ hashFiles('vcpkg.json') }}

    - name: Install package manager
      #
      # We are using vcpkg Manifest Mode. The CMake integration will bootstrap
      # vcpkg and install dependencies for our current build environment! This 
      # is awesome because we do not need to set the package triplet
      # explicitly.
      #
      # https://github.com/microsoft/vcpkg/blob/master/docs/users/manifests.md
      #
      run: >
        git clone
        https://github.com/Microsoft/vcpkg.git
        ${{ github.workspace }}/build/vcpkg/

    - name: Install sonar-scanner
      #
      # https://github.com/Warchant/setup-sonar-scanner
      #
      uses: warchant/setup-sonar-scanner@v3
      #with:
      #  version: 4.6.2.2472

#    - name: Install package dependencies
#      run: apt-get install -y gcovr

    - name: Configure
      #
      # Configure CMake in the "build" subdirectory. This will also install
      # vcpkg dependencies from our project manifest file automagically.
      #
      run: >
        cmake 
        -B ${{ github.workspace }}/build
        -DENABLE_TEST_COVERAGE=ON
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        -DCMAKE_CXX_COMPILER=$(which g++-10)
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/build/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      #
      # Build all enabled programs with the given configuration.
      #
      run: >
        cmake
        --build ${{ github.workspace }}/build
        --config ${{ env.BUILD_TYPE }}
      
    - name: Test
      #
      # Execute tests defined by the CMake configuration. In our project this
      # is any executable target that has an associated add_test(NAME target).
      #
      # Example:
      #   add_executable(unit_test unit_test.cpp)
      #   add_test(UnitTestName unit_test)
      #
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }}

    - name: Create coverage report
      # Compile all coverage files into one XML doc for sonarcloud
      working-directory: ${{ github.workspace }}/build
      run: make coverage

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: >
        sonar-scanner
        --define sonar.cfamily.compile-commands=${{ github.workspace }}/build/compile_commands.json
