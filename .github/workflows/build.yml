name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
    
    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
    
    - uses: actions/cache@v3
      #
      # Enable package binary caching
      # 
      # https://github.com/actions/cache
      # https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
      #
      # Windows: $APPDATA/vcpkg/archives
      # Linux/macOS: $HOME/.cache/vcpkg/archives
      #
      with:
        path: ~/.cache/vcpkg/archives
        key: ${{ runner.os }}-moose-${{ hashFiles('vcpkg.json') }}

    - name: Install package manager
      #
      # We are using vcpkg Manifest Mode. The CMake integration will bootstrap
      # vcpkg and install dependencies for our current build environment! This 
      # is awesome because we do not need to set the package triplet
      # explicitly.
      #
      # https://github.com/microsoft/vcpkg/blob/master/docs/users/manifests.md
      #
      run: >
        git clone
        https://github.com/Microsoft/vcpkg.git
        ${{ github.workspace }}/build/vcpkg/

    - name: Run build-wrapper
      run: |
        cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/build/vcpkg/scripts/buildsystems/vcpkg.cmake
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ${{ github.workspace }}/build --config Release
      
    - name: Test
      #
      # Execute tests defined by the CMake configuration. In our project this
      # is any executable target that has an associated add_test(NAME target).
      #
      # Example:
      #   add_executable(unit_test unit_test.cpp)
      #   add_test(UnitTestName unit_test)
      #
      working-directory: ${{ github.workspace }}/build
      run: ctest -C Release

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: >
        sonar-scanner
        --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
        --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
